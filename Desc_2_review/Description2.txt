КОМПОНОВЩИК: инструмент, соединяющий несколько объектных модулей и собирающий по исполнимый модуль.
ИСПОЛЬЗОВАНИЕ: По сути, в нашем случае основной файл main.py является компоновщиком: он соединяет несколько файлов .py и файл с глобальными переменными .txt в единый проект и запускает его. Полноценное использование "линкования"
излишне, ведь все файлы с кодом имеют одинаковые расширение .py и встроенных возможностей python3 достаточно для линковки.

ДЕКОРАТОРЫ: мы не использовали декораторы вследствие необычной, но крайне удобной особенности питона: он позволяет использовать классы как функции (при такой операции появляется объект класса). Благодаря этому 
мы решили воспользоваться структурным шаблоном (паттерном) facade, позволяющим скрыть сложность нашей структуры путём сведения всех возможных внешних вызовов к одному объекту. В данном случае, это был класс Ending, который, 
по очевидным причинам, вызывался в конце каждого из 5 уровней.

АДАПТЕР/ПРОКСИ: рационален при необходимости организации использования функций объекта, недоступного для изменения, однако с нашей невысокой сложностью структуры и благодаря использованию builder & facade для построения карты и уровней,
мы легко "переключаемся" между классами попросту вызывая их как функции, что не затрагивает "лишнего" и не трубует использования адаптера.


Для удобства сделана иерархия классов проекта с помощью сайта draw.io, представленная в этой же папке.