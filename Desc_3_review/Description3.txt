COMMAND: очень простой шаблон проектирования представляющий 1 действие. Наши классы, наследующиеся от pyglet.window.Window() имеют гораздо больше действий и немалую разветвленность, что склонило наш выбору в пользу паттерна builder,
который гораздо больше соответствует нашей сложной структуре.

ПАТТЕРН: VISITOR
ИСПОЛЬЗОВАНИЕ: для описания и выполнения операций над различными объектами (связь между действиями с buttons & Game_Objects) было решено воспользоваться паттерном VISITOR, упрощающим обслуживание классов, участвующих в данной операции.

COR: эффективен для цепочек наследования большой "глубины". В нашем проекте цепочки короче и проще, потому нерационально использовать COR. Из-за множества похожих (или даже идентичных методов) игровые объекты (Game Objects) реализованы
паттерном абстрактная фабрика, которая вместе с окнами легко регулирует взаимодействие объектов благодаря их малому число. В этом также причина отсутствия OBSERVER.

Для удобства сделана иерархия классов проекта с помощью сайта draw.io, представленная в этой же папке.